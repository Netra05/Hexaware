--CREATE DATABASE ECOMMERCE_CODING_CHALLENGE;
USE ECOMMERCE_CODING_CHALLENGE;

--Customer Table
/*CREATE TABLE Customers1
(customer_ID INT PRIMARY KEY IDENTITY(1,1),
firstName VARCHAR(20),
lastName VARCHAR(20),
Email VARCHAR(100),
address VARCHAR(100));*/

/*INSERT INTO Customers1 VALUES
('John', 'Doe', 'johndoe@example.com', '123 Main St, City'),
('Jane', 'Smith', 'janesmith@example.com', '456 Elm St, Town'),
('Robert', 'Johnson', 'robert@example.com', '789 Oak St, Village'),
('Sarah', 'Brown', 'sarah@example.com', '101 Pine St, Suburb'),
('David', 'Lee', 'david@example.com', '234 Cedar St, District'),
('Laura', 'Hall', 'laura@example.com', '567 Birch St, County'),
('Michael', 'Davis', 'michael@example.com', '890 Maple St, State'),
('Emma', 'Wilson', 'emma@example.com', '321 Redwood St, Country'),
('William', 'Taylor', 'william@example.com', '432 Spruce St, Province'),
('Olivia', 'Adams', 'olivia@example.com', '765 Fir St, Territory');*/


--Order Table
/*CREATE TABLE Order1
(orderID INT PRIMARY KEY IDENTITY(1,1),
customer_id INT,
order_date DATE,
total_price DECIMAL(10,2),
FOREIGN KEY (customer_id) REFERENCES Customers1(customer_id));*/


/*INSERT INTO Order1 VALUES 
(1, '2023-01-05', 1200.00),
(2, '2023-02-10', 900.00),
(3, '2023-03-15', 300.00),
(4, '2023-04-20', 150.00),
(5, '2023-05-25', 1800.00),
(6, '2023-06-30', 400.00),
(7, '2023-07-05', 700.00),
(8, '2023-08-10', 160.00),
(9, '2023-09-15', 140.00),
(10, '2023-10-20', 1400.00);*/

--Products Table
/*CREATE TABLE Products1
(product_id INT PRIMARY KEY IDENTITY(1,1),
name VARCHAR(30),
Description VARCHAR(50),
price DECIMAL(10,2),
stockQuantity int);*/

/*INSERT INTO Products1 VALUES
('Laptop', 'High-performance laptop', 800.00, 10),
('Smartphone', 'Latest smartphone', 600.00, 15),
('Tablet', 'Portable tablet', 300.00, 20),
('Headphones', 'Noise-canceling', 150.00, 30),
('TV', '4K Smart TV', 900.00, 5),
('Coffee Maker', 'Automatic coffee maker', 50.00, 25),
('Refrigerator', 'Energy-efficient', 700.00, 10),
('Microwave Oven', 'Countertop microwave', 80.00, 15),
('Blender', 'High-speed blender', 70.00, 20),
('Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10);*/

--OrderItem Table
/*CREATE TABLE order_items
(order_item_id INT PRIMARY KEY IDENTITY(1,1),
order_id INT,
product_id INT,
quantity INT,
itemAmount DECIMAL(10,2),
FOREIGN KEY (order_id) REFERENCES Order1(orderID),
FOREIGN KEY(product_id) REFERENCES Products1(product_id));*/

/*INSERT INTO order_items VALUES
(1, 1, 2, 1600.00),
(1, 3, 1, 300.00),
(2, 2, 3, 1800.00),
(3, 5, 2, 1800.00),
(4, 4, 4, 600.00),
(4, 6, 1, 50.00),
(5, 1, 1, 800.00),
(5, 2, 2, 1200.00),
(6, 10, 2, 240.00),
(6, 9, 3, 210.00);*/

--Cart Table
/*CREATE TABLE cart
(cart_id INT PRIMARY KEY IDENTITY(1,1),
customer_id INT,
product_id INT,
quantity INT,
FOREIGN KEY(customer_id) REFERENCES Customers1(customer_ID),
FOREIGN KEY(product_id) REFERENCES Products1(product_id));*/

/*INSERT INTO  cart VALUES
(1, 1, 2),
(1, 3, 1),
(2, 2, 3),
(3, 4, 4),
(3, 5, 2),
(4, 6, 1),
(5, 1, 1),
(6, 10, 2),
(6, 9, 3),
(7, 7, 2);*/

--Q1
--UPDATE Products1 set price=800 where name='Refrigerator';

--Q2
--DELETE FROM cart where customer_id=1;

--Q3
--select * from Products1 where price<100;

--Q4
--select * from Products1 where stockQuantity>5;

--Q5
--Select * from Order1 where total_price BETWEEN 500 AND 1000;

--Q6
--Select * from Products1 where name LIKE '%r';

--Q7
--Select * from cart where customer_id=5;

--Q8 
SELECT DISTINCT c.customer_ID, c.firstName, c.lastName, c.Email 
FROM Customers1 c
JOIN Order1 o ON c.customer_ID = o.customer_id
WHERE YEAR(o.order_date) = 2023;


--Q9
--select MIN(stockQuantity) from Products1;

--Q10
--select customer_id , SUM(total_price) from Order1 GROUP BY customer_id;

--Q11
--select customer_id, AVG(total_price) from Order1 group by customer_id;

--Q12
--select customer_id,COUNT(orderID) from Order1 group by customer_id;

--Q13
--select customer_id,MAX(total_price) from Order1 group by customer_id;

--Q14
--select customer_id from Order1 group by customer_id HAVING SUM(total_price)>1000;

--Q15
SELECT * FROM Products1 
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM cart);

--Q16
SELECT * FROM Customers1 
WHERE customer_ID NOT IN (SELECT DISTINCT customer_id FROM Order1);

--Q17
SELECT p.product_id, p.name, 
       (SUM(oi.itemAmount) * 100.0) / (SELECT SUM(itemAmount) FROM order_items) AS revenue_percentage
FROM order_items oi
JOIN Products1 p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.name;

--Q18
SELECT * FROM Products1 
WHERE stockQuantity <= (SELECT AVG(stockQuantity) FROM Products1);

--Q19
SELECT DISTINCT c.customer_ID, c.firstName, c.lastName, c.Email 
FROM Customers1 c
JOIN Order1 o ON c.customer_ID = o.customer_id
WHERE o.total_price > (SELECT AVG(total_price) FROM Order1);
